name: CI, Build, Scan, and Publish Docker Image

on:
  push:
    branches: ["main"]
    paths-ignore: ["**.md"]
  pull_request:
    branches: ["main"]
    paths-ignore: ["**.md"]

env:
  REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  DOCKERHUB_IMAGE_NAME: mbabai/highstorm-next
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_IMAGE: mbabai/highstorm-next
  VPS: ubuntu-24.04
  

jobs:
  ci-checks:
    name: Linting and Testing
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'

      - name: install dependencies
        run: npm ci # npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run Tests
        run: npm run test

  build-and-scan:
    name: Build & Scan Image
    runs-on: ubuntu-24.04
    needs: ci-checks

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image locally
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: |
            ${{ env.GHCR_IMAGE_NAME }}:local-scan
            ${{ env.GHCR_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          # platforms: linux/amd64,linux/arm64/v8
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Scan image with Trivy for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_IMAGE_NAME }}:local-scan
          format: 'table'
          output: trivy-report.json
          exit-code: 0 # 1 to Fail the build if vulnerabilities are found
          severity: 'CRITICAL,HIGH'
          # scan-type: "fs"
        
      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30
      
      - name: Scan image with Dockle
        uses: goodwithtech/dockle-action@main
        with:
          image: ${{ env.GHCR_IMAGE_NAME }}:local-scan
          exit-code: 0 # 1 to Fail the build on issues
          format: 'json'
          output: 'result.json'
          ignore: 'CIS-DI-0001,DKL-DI-0006,DKL-LI-0001'
        
      - name: Upload Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Report
          path: dockle-result.json
      

      - name: Save Docker image as artifact
        run: docker save ${{ env.GHCR_IMAGE_NAME }}:local-scan -o image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  push-to-ghcr:
    name: Push to GitHub Container Registry
    runs-on: ubuntu-24.04
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
    
      - name: Load Docker image
        run: docker load < image.tar

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE_NAME }}
      

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' # Don't push on PRs
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      - name: Push image to GHCR
        run: docker push --all-tags ${{ env.GHCR_IMAGE_NAME }}
        
  push-to-dockerhub:
    name: Push to Docker Hub
    runs-on: ubuntu-24.04
    needs: build-and-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: docker load < image.tar

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_IMAGE_NAME }} # defin
      
      - name: Re-tag image for Docker Hub
        run: |
          SOURCE_IMAGE_NAME="${{ env.GHCR_IMAGE_NAME }}:local-scan"
          TARGET_IMAGE_NAME="${{ env.DOCKERHUB_IMAGE_NAME }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)

          echo "Tagging $SOURCE_IMAGE_NAME as $TARGET_IMAGE_NAME:latest"
          docker tag "$SOURCE_IMAGE_NAME" "$TARGET_IMAGE_NAME:latest"

          echo "Tagging $SOURCE_IMAGE_NAME as $TARGET_IMAGE_NAME:$SHORT_SHA"
          docker tag "$SOURCE_IMAGE_NAME" "$TARGET_IMAGE_NAME:$SHORT_SHA"
        
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
       
      - name: Push image to Docker Hub
        run: docker push --all-tags ${{ env.DOCKERHUB_IMAGE_NAME }}